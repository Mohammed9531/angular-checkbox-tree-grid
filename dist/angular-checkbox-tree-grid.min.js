/**
 * angular-checkbox-tree-grid.js v1.0.1
 * --------------------------------------------------------------------
 *
 * AngularJS Checkbox Tree Gird Directive
 * @author Shoukath Mohammed <mshoukath.uideveloper@gmail.com>
 *
 * Copyright (C) 2016
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

 !function(){"use strict";function e(e){function n(n,t,r){n.$watch(r.compile,function(r){var i=e(r),l=i(n);t.append(l)})}return{restrict:"A",link:n}}function n(){var e,n,t=this;this.data=null,this.results=[],this.getData=function(){return t.data},this.setData=function(e){t.data=e},this.setGridConfig=function(n,r){t.config=n,t.expandingProperty=r,e=n.childrenKeyName},this.flattenTreeData=function(r,i,l,o){var a,c;r=r||[],i=i||1,l=!angular.isDefined(l)||l;for(var d=0;d<r.length;d++)n=""+Math.random(),c=20*(i-1),a=t.treeIconController(r[d],i,"iconExpand"),t.results.push({pid:o,uid:n,cid:"c"+(11*i+d),branch:r[d],level:i,visible:l,expanded:!1,tree_icon:a,styling:{indentation:i>1?""+c:"0",text_indent:""===a?""+(c+20):""+c}}),angular.isArray(r[d][e])&&r[d][e].length&&t.flattenTreeData(r[d][e],i+1,!1,n);return t.attachChildNodes(t.results),t.results},this.attachChildNodes=function(e){angular.forEach(e,function(n,r){e[r].children=t.getChildNodes(e,e[r].uid)||[]})},this.onDataChange=function(e,n){t.results=[],t.flattenTreeData(e)},this.onBranchChange=function(e,n){return e.filter(function(e){return angular.isDefined(n)&&n?e.branch.selected:!e.branch.selected})},this.onToggle=function(e,n){angular.forEach(n,function(r,i){angular.isUndefined(n[i].pid)||n[i].pid!=e.uid||(n[i].visible=e.expanded,!e.expanded&&n[i].expanded&&(n[i].expanded=!1),n[i].children.length&&t.onToggle(n[i],n))})},this.onRootSelect=function(e){for(var n=0;n<t.results.length;n++)t.results[n].branch.selected=e},this.reduceTreeData=function(){return t.onBranchChange(t.results,!0).map(function(e){return e.branch})},this.onSelect=function(e,n,r){r||(t.checkChildNodes(e,n),t.updateNodesCheck(e.level,t.results))},this.getDeselectedNodes=function(){return t.onBranchChange(t.results,!1)},this.isRootNodeSelected=function(){var e=t.getDeselectedNodes(),n=!angular.isArray(e)||!e.length;return n},this.getTreeModel=function(){return t.onBranchChange(t.results,!0)},this.checkChildNodes=function(n,r){for(var i=0;i<t.results.length;i++)t.results[i].pid==n.uid&&(t.results[i].branch.selected=r,t.results[i].branch[e].length&&t.checkChildNodes(t.results[i],r))},this.getNodes=function(e,n){return e.filter(function(e){return e.level==n})},this.recursiveCheck=function(n,r){r=r||1;for(var i=t.getNodes(n,r),l=0;l<i.length;l++){var o=t.getChildNodes(n,i[l].uid)||[];if(o.length){i[l].branch.selected=o.every(t.allSelected);for(var a=0;a<o.length;a++)o[a].branch[e].length&&t.recursiveCheck(n,r+1)}}},this.updateNodesCheck=function(e,n){for(;e>0;)t.recursiveCheck(n,e),e--},this.getChildNodes=function(e,n){return e.filter(function(e){return e.pid==n})},this.allSelected=function(e){return e.branch.selected},this.onChildSelection=function(e,n){if(angular.isArray(n)&&n.length)for(var t=0;t<e.length;t++)for(var r=0;r<n.length;r++)n[r].level>1&&n[r].pid==e[t].uid&&(e[t].branch.selected=n[r].branch.selected)},this.onBranchToggle=function(e){var n="";e.children.length&&(e.expanded=!e.expanded,n=e.expanded?"iconCollapse":"iconExpand",e.tree_icon=t.treeIconController(e.branch,e.level,n),t.onToggle(e,t.results))},this.onTreeDataChange=function(e,n){return t.onBranchChange(e,!0)},this.onTreeModelChange=function(e,n){if(angular.isArray(e))for(var r=0;r<e.length;r++)for(var i=0;i<t.results.length;i++)e[r][t.expandingProperty.field]==t.results[i].branch[t.expandingProperty.field]&&(t.results[i].branch.selected=e[r].selected)},this.treeIconController=function(n,r,i){var l="";return l=n&&n[e].length?angular.isObject(t.config[i])?t.config[i]["level_"+r]||t.config[i].level_1:t.config[i]:t.config.iconIndividual||""}}function t(e,n,t,r,i){function l(e,n){return n.templateUrl?n.templateUrl:i[n.gridType?"getTemplatePath":"getTemplate"](n.gridType)}function o(e,n,i){var l;e.expandingProperty=e.expandOn,l=angular.extend({},t.getGridConfig(),e.treeConfig),e.checkboxTree=l.checkboxTree,e.individualSelect=l.individualSelect,r.setGridConfig(l,e.expandOn),e.$watch("treeModel",r.onTreeModelChange,!0),e.tree_rows=r.flattenTreeData(e.treeData)||[],console.log(e.tree_rows),e.onBranchToggle=function(e){r.onBranchToggle(e)},e.onSelect=function(n,t){r.onSelect(n,t,e.individualSelect),e.treeModel=r.getTreeModel(),e.rootNode=r.isRootNodeSelected()},e.onRootSelect=function(n){r.onRootSelect(n),e.treeModel=r.getTreeModel()}}return{restrict:"E",replace:!0,scope:{treeData:"=",colDefs:"=",expandOn:"=",onSelect:"&",treeControl:"=",treeModel:"=",treeConfig:"=",onBranchClick:"&"},link:o,templateUrl:l}}function r(e){var n=this;this.getTemplate=function(){var t=e.getGridConfig().gridType;return n.getTemplatePath(t)},this.getTemplatePath=function(e){var n={};return n.listGrid="template/list/angularCheckBoxTreeList.html",n.checkboxGrid="template/grid/angularCheckBoxTreeGrid.html",n[e]}}function i(){function e(e){i=e}function n(){return i}function t(e){l=angular.extend({},l,e)}function r(){return l}var i="template/grid/angularCheckBoxTreeGrid.html",l={expandLevel:0,checkboxTree:!1,gridType:"checkboxGrid",childrenKeyName:"children",iconIndividual:"",iconCollapse:"fa fa-angle-down",iconExpand:"fa fa-angle-right",tableType:"table-bordered table-striped table-hover",individualSelect:!1};this.setPath=e,this.setGridConfig=t,this.$get=function(){return{getPath:n,getGridConfig:r}}}function l(e){e.put("template/grid/angularCheckBoxTreeGrid.html",'<div class="table-responsive">\n <table class="table table-bordered table-striped tree-grid">\n   <thead>\n     <tr>\n        <th style="width:5%;" ng-show="checkboxTree">\n           <input type="checkbox" ng-click="onRootSelect(rootNode)" ng-model="rootNode" />\n       </th>\n       <th>{{expandingProperty.displayName || expandingProperty.field || expandingProperty}}</th>\n       <th ng-repeat="col in colDefinitions">{{col.displayName}}</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr ng-repeat="row in tree_rows | filter:{visible:true} track by row.uid"\n       ng-class="\'level-\' + {{ row.level }} + (row.branch.selected ? \'active\': \'\')" class="tree-grid-row">\n       <td class="role-checkbox-tree-node" style="width:5%;" ng-if="checkboxTree">\n         <input class="node-control" name="nodeControl" type="checkbox" ng-model="row.branch.selected" ng-click="onSelect(row, row.branch.selected)" />\n       </td>\n       <td>\n           <a ng-click="onBranchToggle(row)" class="tree-branch-anchor">\n              <i ng-class="row.tree_icon" ng-style="{\'position\': \'relative\', \'left\': row.styling.indentation + \'px\', \'width\': \'15px\'}"></i>\n           </a>           <span class="tree-label" ng-click="onBranchClick({branch: row.branch})"\n             ng-style="{\'position\': \'relative\', \'left\': row.styling.text_indent + \'px\'}">\n             {{row.branch[expandingProperty.field] || row.branch[expandingProperty]}}\n           </span>\n       </td>\n       <td ng-repeat="col in colDefinitions">\n         <div ng-if="col.cellTemplate" compile="col.cellTemplate"></div>\n         <div ng-if="!col.cellTemplate">{{row.branch[col.field]}}</div>\n       </td>\n     </tr>\n   </tbody>\n </table>\n</div>\n'),e.put("template/list/angularCheckBoxTreeList.html",'<ul class="nav nav-list nav-pills nav-stacked list-tree">\n <li ng-repeat="row in tree_rows | filter:{visible:true} track by row.uid" \n   ng-class="\'level-\' + {{ row.level }} + (row.branch.selected ? \'active\': \'\')">\n   <a ng-click="(row.branch.children.length) ? onBranchToggle(row) : \'\'">\n     <i ng-class="row.tree_icon" class="indented tree-icon"></i>\n     <span class="indented tree-label" ng-click="onBranchClick({branch: row.branch})">{{ row.branch[expandingProperty.field] || row.branch[expandingProperty] }}</span>\n   </a>\n </li>\n</ul>\n')}angular.module("ngCheckboxTreeGrid",["angular-checkbox-tree-grid"]),angular.module("ngCheckboxTreeGrid").directive("compile",e),e.$inject=["$compile"],angular.module("ngCheckboxTreeGrid").service("NgTreeGridService",n),angular.module("ngCheckboxTreeGrid").directive("ngCheckboxTreeGrid",t),t.$inject=["$timeout","$templateCache","NgCheckboxTree","NgTreeGridService","NgTreeTemplatesService"],angular.module("ngCheckboxTreeGrid").service("NgTreeTemplatesService",r),r.$inject=["NgCheckboxTree"],angular.module("ngCheckboxTreeGrid").provider("NgCheckboxTree",i),angular.module("angular-checkbox-tree-grid",[]),angular.module("angular-checkbox-tree-grid").run(l),l.$inject=["$templateCache"]}();