/**
 * angular-checkbox-tree-grid.js v1.0.1
 * --------------------------------------------------------------------
 *
 * AngularJS Checkbox Tree Gird Directive
 * @author Shoukath Mohammed <mshoukath.uideveloper@gmail.com>
 *
 * Copyright (C) 2016
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

 !function(){"use strict";function e(e){function n(n,t,r){n.$watch(r.compile,function(r){var l=e(r),i=l(n);t.append(i)})}return{restrict:"A",link:n}}function n(e,n,t,r){function l(e,n){return n.templateUrl?n.templateUrl:r[n.gridType?"getTemplatePath":"getTemplate"](n.gridType)}function o(e,n,r){var l,o;e.expandingProperty=e.expandOn,e.init=function(){var n;l=angular.extend({},t.getGridConfig(),e.treeConfig),angular.extend(e,l),e.treeConfig=l,o=new i({config:l,ep:e.expandOn}),e.checkboxTree?n=e.treeData:(delete e.treeModel,e.rootNode=!1,n=o.clearAllSelectedNodes(e.treeData)),e.treeRows=o.flattenTreeData(n)||[]},e.init(),e.$watch("treeConfig",e.init,!0),e.$watch("treeModel",o.onTreeModelChange,!0),e.onBranchToggle=function(e){o.onBranchToggle(e)},e.onSelect=function(n,t){o.onSelect(n,t,e.individualSelect),e.treeModel=o.getTreeModel(),e.rootNode=o.isRootNodeSelected()},e.onRowClick=function(t,r){e.highlightSelected&&o.highlightSelectedNode.call(n,t),e.onBranchClick({branch:r})},e.onRootSelect=function(n){o.onRootSelect(n),e.treeModel=o.getTreeModel()}}return{restrict:"E",replace:!0,scope:{colDefs:"=",expandOn:"=",onSelect:"&",treeData:"=",treeModel:"=",treeConfig:"=",treeControl:"=",onBranchClick:"&"},link:o,templateUrl:l}}function t(e){var n=this;this.getTemplate=function(){var t=e.getGridConfig().gridType;return n.getTemplatePath(t)},this.getTemplatePath=function(e){var n={};return n.listGrid="template/list/angularCheckBoxTreeList.html",n.checkboxGrid="template/grid/angularCheckBoxTreeGrid.html",n[e]}}function r(){function e(e){l=e}function n(){return l}function t(e){i=angular.extend({},i,e)}function r(){return i}var l="template/grid/angularCheckBoxTreeGrid.html",i={expandLevel:0,iconIndividual:"",checkboxTree:!1,individualSelect:!1,gridType:"checkboxGrid",highlightSelected:!1,childrenKeyName:"children",iconExpand:"fa fa-angle-right",iconCollapse:"fa fa-angle-down",tableType:"table table-bordered table-striped table-hover"};this.setPath=e,this.setGridConfig=t,this.$get=function(){return{getPath:n,getGridConfig:r}}}function l(e){e.put("template/grid/angularCheckBoxTreeGrid.html",'<div class="table-responsive">\n <table class="tree-grid" ng-class="tableType">\n   <thead>\n     <tr>\n        <th style="width:5%;" ng-show="checkboxTree">\n           <input type="checkbox" ng-click="onRootSelect(rootNode)" ng-model="rootNode" />\n       </th>\n       <th>{{expandingProperty.displayName || expandingProperty.field || expandingProperty}}</th>\n       <th ng-repeat="col in colDefinitions">{{col.displayName}}</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr ng-repeat="row in treeRows | filter:{visible:true} track by row.uid"\n       ng-class="\'level-\' + {{ row.level }} + (row.branch.selected ? \' active\': \'\')" class="tree-grid-row">\n       <td class="role-checkbox-tree-node" style="width:5%;" ng-if="checkboxTree">\n         <input class="node-control" name="nodeControl" type="checkbox" ng-model="row.branch.selected" ng-click="onSelect(row, row.branch.selected)" />\n       </td>\n       <td>\n           <a ng-click="(row.branch.children.length) ? onBranchToggle(row) : \'\'" class="tree-branch-anchor">\n              <i ng-class="row.tree_icon" ng-style="{\'position\': \'relative\', \'left\': row.styling.indentation + \'px\', \'width\': \'15px\'}"></i>\n           </a>           <span class="tree-label" ng-click="onRowClick($event, row.branch)"\n             ng-style="{\'position\': \'relative\', \'left\': row.styling.text_indent + \'px\'}">\n             {{row.branch[expandingProperty.field] || row.branch[expandingProperty]}}\n           </span>\n       </td>\n       <td ng-repeat="col in colDefinitions">\n         <div ng-if="col.cellTemplate" compile="col.cellTemplate"></div>\n         <div ng-if="!col.cellTemplate">{{row.branch[col.field]}}</div>\n       </td>\n     </tr>\n   </tbody>\n </table>\n</div>\n'),e.put("template/list/angularCheckBoxTreeList.html",'<ul class="nav nav-list nav-pills nav-stacked list-tree">\n <li ng-repeat="row in treeRows | filter:{visible:true} track by row.uid" \n   ng-class="\'level-\' + {{ row.level }} + (row.branch.selected ? \'active\': \'\')">\n   <a ng-click="(row.branch.children.length) ? onBranchToggle(row) : \'\'">\n     <i ng-class="row.tree_icon" class="indented tree-icon"></i>\n     <span class="indented tree-label" ng-click="onRowClick($event, row.branch)">{{ row.branch[expandingProperty.field] || row.branch[expandingProperty] }}</span>\n   </a>\n </li>\n</ul>\n')}angular.module("ngCheckboxTreeGrid",["angular-checkbox-tree-grid"]),angular.module("ngCheckboxTreeGrid").directive("compile",e),e.$inject=["$compile"];var i=function(e){var n,t,r=this;n=e.config?e.config.childrenKeyName:"children",this.results=[],this.config=e.config,this.expandingProperty=e.ep,this.flattenTreeData=function(e,l,i,o){var a,c;e=e||[],l=l||1,i=!angular.isDefined(i)||i;for(var d=0;d<e.length;d++)t=""+Math.random(),c=20*(l-1),a=r.treeIconController(e[d],l,"iconExpand"),r.results.push({pid:o,uid:t,cid:"c"+(11*l+d),branch:e[d],level:l,visible:i,expanded:!1,tree_icon:a,styling:{indentation:l>1?""+c:"0",text_indent:""===a?""+(c+20):""+c}}),angular.isArray(e[d][n])&&e[d][n].length&&r.flattenTreeData(e[d][n],l+1,!1,t);return r.attachChildNodes(r.results),r.results},this.attachChildNodes=function(e){angular.forEach(e,function(n,t){e[t].children=r.getChildNodes(e,e[t].uid)||[]})},this.onDataChange=function(e,n){r.results=[],r.flattenTreeData(e)},this.onBranchChange=function(e,n){return e.filter(function(e){return angular.isDefined(n)&&n?e.branch.selected:!e.branch.selected})},this.onToggle=function(e,n){angular.forEach(n,function(t,l){angular.isUndefined(n[l].pid)||n[l].pid!=e.uid||(n[l].visible=e.expanded,!e.expanded&&n[l].expanded&&(n[l].expanded=!1),n[l].children.length&&r.onToggle(n[l],n))})},this.onRootSelect=function(e){for(var n=0;n<r.results.length;n++)r.results[n].branch.selected=e},this.reduceTreeData=function(){return r.onBranchChange(r.results,!0).map(function(e){return e.branch})},this.onSelect=function(e,n,t){t||(r.checkChildNodes(e,n),r.updateNodesCheck(e.level,r.results))},this.getDeselectedNodes=function(){return r.onBranchChange(r.results,!1)},this.isRootNodeSelected=function(){var e=r.getDeselectedNodes(),n=!angular.isArray(e)||!e.length;return n},this.getTreeModel=function(){return r.onBranchChange(r.results,!0)},this.checkChildNodes=function(e,t){for(var l=0;l<r.results.length;l++)r.results[l].pid==e.uid&&(r.results[l].branch.selected=t,r.results[l].branch[n].length&&r.checkChildNodes(r.results[l],t))},this.getNodes=function(e,n){return e.filter(function(e){return e.level==n})},this.recursiveCheck=function(e,t){t=t||1;for(var l=r.getNodes(e,t),i=0;i<l.length;i++){var o=r.getChildNodes(e,l[i].uid)||[];if(o.length){l[i].branch.selected=o.every(r.allSelected);for(var a=0;a<o.length;a++)o[a].branch[n].length&&r.recursiveCheck(e,t+1)}}},this.updateNodesCheck=function(e,n){for(;e>0;)r.recursiveCheck(n,e),e--},this.getChildNodes=function(e,n){return e.filter(function(e){return e.pid==n})},this.allSelected=function(e){return e.branch.selected},this.onChildSelection=function(e,n){if(angular.isArray(n)&&n.length)for(var t=0;t<e.length;t++)for(var r=0;r<n.length;r++)n[r].level>1&&n[r].pid==e[t].uid&&(e[t].branch.selected=n[r].branch.selected)},this.onBranchToggle=function(e){var n="";e.children.length&&(e.expanded=!e.expanded,n=e.expanded?"iconCollapse":"iconExpand",e.tree_icon=r.treeIconController(e.branch,e.level,n),r.onToggle(e,r.results))},this.onTreeDataChange=function(e,n){return r.onBranchChange(e,!0)},this.onTreeModelChange=function(e,n){if(angular.isArray(e))for(var t=0;t<e.length;t++)for(var l=0;l<r.results.length;l++)e[t][r.expandingProperty.field]==r.results[l].branch[r.expandingProperty.field]&&(r.results[l].branch.selected=e[t].selected)},this.clearAllSelectedNodes=function(e){if(angular.isArray(e)){for(var t=0;t<e.length;t++)delete e[t].selected,e[t][n].length&&r.clearAllSelectedNodes(e[t][n]);return e}return[]},this.highlightSelectedNode=function(e){var n=angular.element(e.currentTarget).parent()[0];"TD"==n.nodeName&&(n=angular.element(n.parentNode)),this.find(".highlighted").removeClass("highlighted"),n.addClass("highlighted")},this.treeIconController=function(e,t,l){var i="";return i=e&&e[n].length?angular.isObject(r.config[l])?r.config[l]["level_"+t]||r.config[l].level_1:r.config[l]:r.config.iconIndividual||""}};angular.module("ngCheckboxTreeGrid").directive("ngCheckboxTreeGrid",n),n.$inject=["$timeout","$templateCache","NgCheckboxTree","NgTreeTemplatesService"],angular.module("ngCheckboxTreeGrid").service("NgTreeTemplatesService",t),t.$inject=["NgCheckboxTree"],angular.module("ngCheckboxTreeGrid").provider("NgCheckboxTree",r),angular.module("angular-checkbox-tree-grid",[]),angular.module("angular-checkbox-tree-grid").run(l),l.$inject=["$templateCache"]}();